{"remainingRequest":"/Users/shizhonghua/workspace/sell/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shizhonghua/workspace/sell/src/views/sys/scenario/createEditDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shizhonghua/workspace/sell/src/views/sys/scenario/createEditDialog.vue","mtime":1559700038000},{"path":"/Users/shizhonghua/workspace/sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shizhonghua/workspace/sell/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/shizhonghua/workspace/sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shizhonghua/workspace/sell/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getAllPlatform, getProfileByPlatformId } from '@/http/api/platformApi.js'\n\nexport default {\n  data () {\n    return {\n      createForm: {\n        platformId: '',\n        profileId: '',\n        scenarioName: '',\n        scenarioDesc: '',\n        exposurePoint: ''\n      },\n      platformArr: [],\n      profileArr: [],\n      dialog: {\n        title: this.$t('create'),\n        labelName: this.$t('create'),\n        buttonType: ''\n      }\n    }\n  },\n  methods: {\n    platformIdChange (id) {\n      this.createForm.profileId = ''\n      getProfileByPlatformId(id).then(res => {\n        this.profileArr = res\n      })\n    },\n    open (item) {\n      getAllPlatform().then(res => {\n        this.platformArr = res\n      })\n      if (item) {\n        this.createForm = item\n        this.dialog = {\n          title: this.$t('edit'),\n          labelName: this.$t('save'),\n          buttonType: 'UPDATA'\n        }\n        getProfileByPlatformId(item.platformId).then(res => {\n          this.profileArr = res\n        })\n      } else {\n        this.profileArr = []\n        this.createForm = {\n          platformId: '',\n          profileId: '',\n          scenarioName: '',\n          scenarioDesc: '',\n          exposurePoint: ''\n        }\n        this.dialog = {\n          title: this.$t('create'),\n          labelName: this.$t('create'),\n          buttonType: 'CREATE'\n        }\n      }\n      this.$refs.platformDialog.open()\n    },\n    onConfirmCreateType (formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          if (!this.createForm.scenarioName) {\n            this.$message.error(this.$t('sceneNoempty'))\n            return false\n          } else if (!this.createForm.scenarioDesc) {\n            this.$message.error(this.$t('describeNoempty'))\n            return false\n          } else if (!this.createForm.platformId) {\n            this.$message.error(this.$t('sourceNoempty'))\n            return false\n          } else if (!this.createForm.profileId) {\n            this.$message.error(this.$t('profileNoempty'))\n            return false\n          }\n          this.$refs.platformDialog.close()\n          if (this.dialog.buttonType === 'CREATE') {\n            this.$emit('success', { data: this.createForm, code: 0 })\n          } else {\n            this.$emit('success', { data: this.createForm, code: 1 })\n          }\n        }\n      })\n    }\n  }\n}\n",{"version":3,"sources":["createEditDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"createEditDialog.vue","sourceRoot":"src/views/sys/scenario","sourcesContent":["<template>\n  <gucp-dialog ref=\"platformDialog\" :title=\"dialog.title\" :confirm-label=\"dialog.labelName\"\n    @confirm=\"onConfirmCreateType('createForm')\">\n    <el-form ref=\"createForm\" :model=\"createForm\" label-width=\"80px\" label-suffix=\":\" label-position=\"right\">\n      <el-form-item :label=\"$t('scene')\" prop=\"scenarioName\">\n        <el-input v-model=\"createForm.scenarioName\" :placeholder=\"$t('scene')\" />\n      </el-form-item>\n      <el-form-item :label=\"$t('describe')\" prop=\"scenarioDesc\">\n        <el-input v-model=\"createForm.scenarioDesc\" :placeholder=\"$t('describe')\" />\n      </el-form-item>\n      <el-form-item :label=\"$t('source')\" prop=\"Platform\">\n        <el-select v-model=\"createForm.platformId\" product @change=\"platformIdChange\">\n          <el-option v-for=\"item in platformArr\" :key=\"item.id\" :label=\"item.platformDesc\" :value=\"item.id\" />\n        </el-select>\n      </el-form-item>\n      <el-form-item :label=\"$t('profile')\" prop=\"Profile\">\n        <el-select v-model=\"createForm.profileId\" product>\n          <el-option v-for=\"item in profileArr\" :key=\"item.id\" :label=\"item.profileName\" :value=\"item.id\" />\n        </el-select>\n      </el-form-item>\n      <el-form-item :label=\"$t('Point')\" prop=\"exposurePoint\">\n          <el-input  v-model=\"createForm.exposurePoint\"  :placeholder=\"$t('Point')\"></el-input>\n      </el-form-item>\n    </el-form>\n  </gucp-dialog>\n</template>\n<script>\nimport { getAllPlatform, getProfileByPlatformId } from '@/http/api/platformApi.js'\n\nexport default {\n  data () {\n    return {\n      createForm: {\n        platformId: '',\n        profileId: '',\n        scenarioName: '',\n        scenarioDesc: '',\n        exposurePoint: ''\n      },\n      platformArr: [],\n      profileArr: [],\n      dialog: {\n        title: this.$t('create'),\n        labelName: this.$t('create'),\n        buttonType: ''\n      }\n    }\n  },\n  methods: {\n    platformIdChange (id) {\n      this.createForm.profileId = ''\n      getProfileByPlatformId(id).then(res => {\n        this.profileArr = res\n      })\n    },\n    open (item) {\n      getAllPlatform().then(res => {\n        this.platformArr = res\n      })\n      if (item) {\n        this.createForm = item\n        this.dialog = {\n          title: this.$t('edit'),\n          labelName: this.$t('save'),\n          buttonType: 'UPDATA'\n        }\n        getProfileByPlatformId(item.platformId).then(res => {\n          this.profileArr = res\n        })\n      } else {\n        this.profileArr = []\n        this.createForm = {\n          platformId: '',\n          profileId: '',\n          scenarioName: '',\n          scenarioDesc: '',\n          exposurePoint: ''\n        }\n        this.dialog = {\n          title: this.$t('create'),\n          labelName: this.$t('create'),\n          buttonType: 'CREATE'\n        }\n      }\n      this.$refs.platformDialog.open()\n    },\n    onConfirmCreateType (formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          if (!this.createForm.scenarioName) {\n            this.$message.error(this.$t('sceneNoempty'))\n            return false\n          } else if (!this.createForm.scenarioDesc) {\n            this.$message.error(this.$t('describeNoempty'))\n            return false\n          } else if (!this.createForm.platformId) {\n            this.$message.error(this.$t('sourceNoempty'))\n            return false\n          } else if (!this.createForm.profileId) {\n            this.$message.error(this.$t('profileNoempty'))\n            return false\n          }\n          this.$refs.platformDialog.close()\n          if (this.dialog.buttonType === 'CREATE') {\n            this.$emit('success', { data: this.createForm, code: 0 })\n          } else {\n            this.$emit('success', { data: this.createForm, code: 1 })\n          }\n        }\n      })\n    }\n  }\n}\n</script>\n"]}]}