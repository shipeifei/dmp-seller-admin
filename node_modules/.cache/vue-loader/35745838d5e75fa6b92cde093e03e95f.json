{"remainingRequest":"/Users/shizhonghua/workspace/sell/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shizhonghua/workspace/sell/src/views/home/lineChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shizhonghua/workspace/sell/src/views/home/lineChart.vue","mtime":1561604473000},{"path":"/Users/shizhonghua/workspace/sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shizhonghua/workspace/sell/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/shizhonghua/workspace/sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shizhonghua/workspace/sell/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n\nimport resize from '@/views/chart/chartsView/resize'\nimport { getChartData } from '@/http/api/homeApi'\nexport default {\n  mixins: [resize],\n  data () {\n    return {\n      chart: null\n    }\n  },\n  props: {\n    id: {\n      type: String,\n      required: true\n    },\n    title: {\n      type: String,\n      default: ''\n    },\n    isFull: {\n      type: Boolean\n    }\n  },\n  watch: {\n    isFull () {\n      this.chart.resize()\n    }\n  },\n  mounted () {\n    this.getEchart()\n  },\n  methods: {\n    async getEchart () {\n      const { id, title } = this\n      getChartData()\n        .then(res => {\n          let dataX = []\n          let dataY = []\n          res.forEach(item => {\n            let date = new Date(item.endDate)\n            let month = date.getMonth() + 1\n            let day = date.getDate()\n            dataX.push(month + '-' + day)\n            dataY.push(item[id])\n          })\n          const fun = {\n            amountMoney: () => {\n              return new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                { offset: 0, color: 'rgba(35, 82, 188, 0.99)' },\n                { offset: 1, color: 'rgba(35, 82, 188, 0.2)' }\n              ])\n            },\n            clickCount: () => {\n              return new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                { offset: 0, color: 'rgba(255, 210, 0, 1)' },\n                { offset: 1, color: 'rgba(255, 210, 0, 0.3)' }\n              ])\n            },\n            seconds: () => {\n              return new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                { offset: 0, color: 'rgba(255, 210, 0, 1)' },\n                { offset: 1, color: 'rgba(255, 210, 0, 0.3)' }\n              ])\n            }\n          }\n          this.chart = this.$echarts.init(document.getElementById(id))\n          const option = {\n            title: {\n              text: title,\n              textStyle: {\n                color: '#fff',\n                fontSize: 15\n              },\n              top: '4%',\n              left: '2%'\n            },\n            grid: {\n              top: '20%',\n              left: '2%',\n              bottom: '5%',\n              containLabel: true\n            },\n            tooltip: {\n              trigger: 'axis',\n              backgroundColor: 'rgba(50, 50, 50, 0.5)'\n            },\n            xAxis: {\n              data: dataX,\n              boundaryGap: true,\n              axisLabel: {\n                show: true,\n                textStyle: {\n                  color: '#fff', // 更改坐标轴文字颜色\n                  fontSize: 12 // 更改坐标轴文字大小\n                }\n              },\n              // axisTick: {\n              //   show: false // 隐藏刻度线\n              // },\n              axisLine: {\n                lineStyle: {\n                  color: '#fff'\n                }\n              }\n            },\n            yAxis: {\n              type: 'value',\n              axisTick: {\n                show: false\n              },\n              axisLabel: {\n                show: true,\n                textStyle: {\n                  color: '#fff',\n                  fontSize: 12\n                }\n              },\n              splitLine: {\n                show: false\n              },\n              axisLine: {\n                lineStyle: {\n                  color: '#fff'\n                }\n              }\n            },\n            series: [\n              {\n                data: dataY,\n                type: 'bar',\n                smooth: true,\n                itemStyle: {\n                  color: fun[id]()\n                },\n                barWidth: 10,\n                barGap: '30%'\n              }\n            ]\n          }\n          // linear-gradient(0deg,rgba(255,210,0,1) 0%,rgba(255,210,0,0.3) 100%);\n          this.chart.setOption(option)\n        })\n        .catch(err => {\n          this.$message.error(err.message)\n        })\n    }\n  }\n}\n",{"version":3,"sources":["lineChart.vue"],"names":[],"mappingsfile":"lineChart.vue","sourceRoot":"src/views/home","sourcesContent":["<template>\n  <div :id=\"id\" class=\"lineChart\"></div>\n</template>\n<script>\nimport resize from '@/views/chart/chartsView/resize'\nimport { getChartData } from '@/http/api/homeApi'\nexport default {\n  mixins: [resize],\n  data () {\n    return {\n      chart: null\n    }\n  },\n  props: {\n    id: {\n      type: String,\n      required: true\n    },\n    title: {\n      type: String,\n      default: ''\n    },\n    isFull: {\n      type: Boolean\n    }\n  },\n  watch: {\n    isFull () {\n      this.chart.resize()\n    }\n  },\n  mounted () {\n    this.getEchart()\n  },\n  methods: {\n    async getEchart () {\n      const { id, title } = this\n      getChartData()\n        .then(res => {\n          let dataX = []\n          let dataY = []\n          res.forEach(item => {\n            let date = new Date(item.endDate)\n            let month = date.getMonth() + 1\n            let day = date.getDate()\n            dataX.push(month + '-' + day)\n            dataY.push(item[id])\n          })\n          const fun = {\n            amountMoney: () => {\n              return new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                { offset: 0, color: 'rgba(35, 82, 188, 0.99)' },\n                { offset: 1, color: 'rgba(35, 82, 188, 0.2)' }\n              ])\n            },\n            clickCount: () => {\n              return new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                { offset: 0, color: 'rgba(255, 210, 0, 1)' },\n                { offset: 1, color: 'rgba(255, 210, 0, 0.3)' }\n              ])\n            },\n            seconds: () => {\n              return new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                { offset: 0, color: 'rgba(255, 210, 0, 1)' },\n                { offset: 1, color: 'rgba(255, 210, 0, 0.3)' }\n              ])\n            }\n          }\n          this.chart = this.$echarts.init(document.getElementById(id))\n          const option = {\n            title: {\n              text: title,\n              textStyle: {\n                color: '#fff',\n                fontSize: 15\n              },\n              top: '4%',\n              left: '2%'\n            },\n            grid: {\n              top: '20%',\n              left: '2%',\n              bottom: '5%',\n              containLabel: true\n            },\n            tooltip: {\n              trigger: 'axis',\n              backgroundColor: 'rgba(50, 50, 50, 0.5)'\n            },\n            xAxis: {\n              data: dataX,\n              boundaryGap: true,\n              axisLabel: {\n                show: true,\n                textStyle: {\n                  color: '#fff', // 更改坐标轴文字颜色\n                  fontSize: 12 // 更改坐标轴文字大小\n                }\n              },\n              // axisTick: {\n              //   show: false // 隐藏刻度线\n              // },\n              axisLine: {\n                lineStyle: {\n                  color: '#fff'\n                }\n              }\n            },\n            yAxis: {\n              type: 'value',\n              axisTick: {\n                show: false\n              },\n              axisLabel: {\n                show: true,\n                textStyle: {\n                  color: '#fff',\n                  fontSize: 12\n                }\n              },\n              splitLine: {\n                show: false\n              },\n              axisLine: {\n                lineStyle: {\n                  color: '#fff'\n                }\n              }\n            },\n            series: [\n              {\n                data: dataY,\n                type: 'bar',\n                smooth: true,\n                itemStyle: {\n                  color: fun[id]()\n                },\n                barWidth: 10,\n                barGap: '30%'\n              }\n            ]\n          }\n          // linear-gradient(0deg,rgba(255,210,0,1) 0%,rgba(255,210,0,0.3) 100%);\n          this.chart.setOption(option)\n        })\n        .catch(err => {\n          this.$message.error(err.message)\n        })\n    }\n  }\n}\n</script>\n"]}]}