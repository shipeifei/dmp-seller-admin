{"remainingRequest":"/Users/shizhonghua/workspace/sell/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shizhonghua/workspace/sell/src/views/sys/hotProduct/createEditDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shizhonghua/workspace/sell/src/views/sys/hotProduct/createEditDialog.vue","mtime":1561009532000},{"path":"/Users/shizhonghua/workspace/sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shizhonghua/workspace/sell/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/shizhonghua/workspace/sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shizhonghua/workspace/sell/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport draggable from 'vuedraggable'\nimport { getProductCodeByName } from '@/http/api/platformApi.js'\nexport default {\n  components: {\n    draggable\n  },\n  data () {\n    return {\n      tableIndex: null,\n      restaurants: [],\n      platformArr: [],\n      sendData: '',\n      dialog: {\n        title: this.$t('create'),\n        labelName: this.$t('create'),\n        buttonType: 'CREATE'\n      },\n      createForm: {\n        codes: [{}]\n      },\n      isCode: true\n    }\n  },\n\n  methods: {\n    querySearchAsync (queryString, cb) {\n      var restaurants = []\n      getProductCodeByName(queryString).then(res => {\n        restaurants = res\n        var results = queryString\n          ? restaurants.filter(this.createStateFilter(queryString))\n          : restaurants\n        clearTimeout(this.timeout)\n        this.timeout = setTimeout(() => {\n          cb(results)\n        }, 0)\n      })\n    },\n    createStateFilter (queryString) {\n      return state => {\n        return (\n          state.codeName.toLowerCase().indexOf(queryString.toLowerCase()) !== -1\n        )\n      }\n    },\n    handleSelect (item) {\n      this.createForm.codes[this.tableIndex] = item\n    },\n    focusInput (index) {\n      this.tableIndex = index\n    },\n    removeDomain (item) {\n      let index = this.createForm.codes.indexOf(item)\n      this.createForm.codes.splice(index, 1)\n      this.$message.success(this.$t('Delsuccess'))\n    },\n    addDomain () {\n      this.createForm.codes.push({})\n      this.$message.success(this.$t('Addsuccess'))\n    },\n    open (item, resultData) {\n      this.sendData = resultData\n      if (item) {\n        this.createForm = {\n          codes: item\n        }\n        this.dialog = {\n          title: this.$t('edit'),\n          labelName: this.$t('save'),\n          buttonType: 'UPDATE'\n        }\n      } else {\n        this.createForm = {\n          codes: [{}]\n        }\n        this.dialog = {\n          title: this.$t('create'),\n          labelName: this.$t('create'),\n          buttonType: 'CREATE'\n        }\n      }\n      this.$refs.hotProductDialog.open()\n    },\n    onConfirmCreateType (formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          let obj = {}\n          let isRepeat = false\n          let isEmpty = false\n          this.createForm.codes.forEach(item => {\n            if (obj[item.code]) {\n              isRepeat = true\n            } else if (!item.code) {\n              isEmpty = true\n            }\n            obj[item.code] = 1\n          })\n          if (isRepeat) {\n            this.$message.error(this.$t('ProductNorepeated'))\n            return\n          }\n          if (isEmpty) {\n            this.$message.error(this.$t('ProductNoempty'))\n            return\n          }\n          this.$refs.hotProductDialog.close()\n          delete this.createForm.localDate\n          if (this.dialog.buttonType === 'CREATE') {\n            this.$emit('success', { data: this.createForm, code: 0 })\n          } else {\n            this.$emit('success', {\n              data: this.createForm,\n              code: 1,\n              dataResource: this.sendData\n            })\n          }\n        } else {\n          return false\n        }\n      })\n    }\n  }\n}\n",{"version":3,"sources":["createEditDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsfile":"createEditDialog.vue","sourceRoot":"src/views/sys/hotProduct","sourcesContent":["<template>\n    <gucp-dialog ref=\"hotProductDialog\" :title=\"dialog.title\" :confirm-label=\"dialog.labelName\" width=\"60%\" @confirm=\"onConfirmCreateType('createForm')\">\n        <el-form ref=\"createForm\" :model=\"createForm\" :inline=\"true\" label-suffix=\":\" label-position=\"right\" label-width=\"140px\">\n            <draggable v-model=\"createForm.codes\">\n                <div v-for=\"(domain, index) in createForm.codes\" :key=\"index\" class=\"move-item\">\n                    <el-form-item :label=\"$t('defaultProducts') + (index + 1)\" :prop=\"'createFormcodes' + index + 'subProductId'\">\n                        <el-autocomplete v-model=\"domain.codeName\" :fetch-suggestions=\"querySearchAsync\" :clearable=\"true\" :trigger-on-focus=\"false\" :placeholder=\"$t('pleaseContent')\" value-key=\"codeName\" @select=\"handleSelect\" @focus=\"focusInput(index)\" />\n                        <i v-if=\"index === 0\" class=\"el-icon-circle-plus-outline icon\" @click=\"addDomain\" />\n                        <i v-else class=\"el-icon-remove-outline icon\" @click.prevent=\"removeDomain(domain)\" />\n                        <i class=\"el-icon-sort icon\" />\n                    </el-form-item>\n                </div>\n                <div v-if=\"createForm.codes.length===0\" style=\"color:#cae0fd;\">\n                    {{$t('DataNo')}}\n                    <i class=\"el-icon-circle-plus-outline icon\" @click=\"addDomain\" />\n                </div>\n\n            </draggable>\n        </el-form>\n    </gucp-dialog>\n</template>\n<script>\nimport draggable from 'vuedraggable'\nimport { getProductCodeByName } from '@/http/api/platformApi.js'\nexport default {\n  components: {\n    draggable\n  },\n  data () {\n    return {\n      tableIndex: null,\n      restaurants: [],\n      platformArr: [],\n      sendData: '',\n      dialog: {\n        title: this.$t('create'),\n        labelName: this.$t('create'),\n        buttonType: 'CREATE'\n      },\n      createForm: {\n        codes: [{}]\n      },\n      isCode: true\n    }\n  },\n\n  methods: {\n    querySearchAsync (queryString, cb) {\n      var restaurants = []\n      getProductCodeByName(queryString).then(res => {\n        restaurants = res\n        var results = queryString\n          ? restaurants.filter(this.createStateFilter(queryString))\n          : restaurants\n        clearTimeout(this.timeout)\n        this.timeout = setTimeout(() => {\n          cb(results)\n        }, 0)\n      })\n    },\n    createStateFilter (queryString) {\n      return state => {\n        return (\n          state.codeName.toLowerCase().indexOf(queryString.toLowerCase()) !== -1\n        )\n      }\n    },\n    handleSelect (item) {\n      this.createForm.codes[this.tableIndex] = item\n    },\n    focusInput (index) {\n      this.tableIndex = index\n    },\n    removeDomain (item) {\n      let index = this.createForm.codes.indexOf(item)\n      this.createForm.codes.splice(index, 1)\n      this.$message.success(this.$t('Delsuccess'))\n    },\n    addDomain () {\n      this.createForm.codes.push({})\n      this.$message.success(this.$t('Addsuccess'))\n    },\n    open (item, resultData) {\n      this.sendData = resultData\n      if (item) {\n        this.createForm = {\n          codes: item\n        }\n        this.dialog = {\n          title: this.$t('edit'),\n          labelName: this.$t('save'),\n          buttonType: 'UPDATE'\n        }\n      } else {\n        this.createForm = {\n          codes: [{}]\n        }\n        this.dialog = {\n          title: this.$t('create'),\n          labelName: this.$t('create'),\n          buttonType: 'CREATE'\n        }\n      }\n      this.$refs.hotProductDialog.open()\n    },\n    onConfirmCreateType (formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          let obj = {}\n          let isRepeat = false\n          let isEmpty = false\n          this.createForm.codes.forEach(item => {\n            if (obj[item.code]) {\n              isRepeat = true\n            } else if (!item.code) {\n              isEmpty = true\n            }\n            obj[item.code] = 1\n          })\n          if (isRepeat) {\n            this.$message.error(this.$t('ProductNorepeated'))\n            return\n          }\n          if (isEmpty) {\n            this.$message.error(this.$t('ProductNoempty'))\n            return\n          }\n          this.$refs.hotProductDialog.close()\n          delete this.createForm.localDate\n          if (this.dialog.buttonType === 'CREATE') {\n            this.$emit('success', { data: this.createForm, code: 0 })\n          } else {\n            this.$emit('success', {\n              data: this.createForm,\n              code: 1,\n              dataResource: this.sendData\n            })\n          }\n        } else {\n          return false\n        }\n      })\n    }\n  }\n}\n</script>\n<style lang=\"less\" scoped>\n.move-item {\n  display: flex;\n  align-items: center;\n  height: 50px;\n}\n.icon {\n  font-size: 20px;\n  color: #90a4ae;\n  text-align: center;\n  margin-left: 8px;\n  margin-top: -8px;\n  cursor: pointer;\n}\n.el-textarea {\n  width: 500px;\n}\n.el-input,\n.el-select {\n  width: 150px;\n  padding: 0;\n  margin: 0;\n}\n</style>\n"]}]}