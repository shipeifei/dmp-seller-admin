{"remainingRequest":"/Users/shizhonghua/workspace/sell/node_modules/babel-loader/lib/index.js!/Users/shizhonghua/workspace/sell/src/http/index.js","dependencies":[{"path":"/Users/shizhonghua/workspace/sell/src/http/index.js","mtime":1561433999000},{"path":"/Users/shizhonghua/workspace/sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shizhonghua/workspace/sell/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/shizhonghua/workspace/sell/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.array.map\";\nimport _toConsumableArray from \"/Users/shizhonghua/workspace/sell/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/shizhonghua/workspace/sell/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\nimport Vue from 'vue/dist/vue.runtime.esm';\nimport VueResource from 'vue-resource';\nimport stringFormat from 'string-format';\nimport interceptors from \"./interceptors\";\nimport { isSuccess, getError } from \"./util\";\nVue.use(VueResource);\nVue.http.options.root = process.env.VUE_APP_SERVER;\nVue.http.options.timeout = process.env.MAX_TIME_OUT; // 请求超时时间\n\nvar URL_ENCODED_CONTENT_TYPE = 'application/x-www-form-urlencoded; charset=UTF-8';\ninterceptors.forEach(function (interceptor) {\n  return Vue.http.interceptors.push(interceptor);\n});\n\nvar checkStatus = function checkStatus(response) {\n  if (isSuccess(response)) {\n    return response;\n  }\n\n  throw getError(response);\n};\n\nvar encodeData = function encodeData() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var body = '';\n\n  for (var key in data) {\n    body += encodeURIComponent(key) + '=' + encodeURIComponent(data[key]) + '&';\n  }\n\n  if (body.length) {\n    // remote the last '&'\n    body = body.substring(0, body.length - 1);\n  }\n\n  return body;\n};\n\nvar getData = function getData(data) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return options.encodeData ? encodeData(data) : data;\n};\n\nvar getOptions = function getOptions() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var headers = options.headers || {};\n\n  if (options.encodeData) {\n    headers['Content-type'] = URL_ENCODED_CONTENT_TYPE;\n  }\n\n  return _objectSpread({}, options, {\n    headers: headers\n  });\n};\n\nvar isBlobResponseType = function isBlobResponseType(options) {\n  return Boolean(options && options.responseType === 'blob');\n}; // 返回Promise对象\n\n\nvar parseJSON = function parseJSON(response) {\n  try {\n    if (response.status === 200 && response.body === '') {\n      return new Promise(function (resolve) {\n        resolve({\n          body: {\n            code: 0,\n            message: 'success'\n          }\n        });\n      });\n    }\n\n    return response.json();\n  } catch (error) {\n    console.log('parseJSON is error:' + error);\n  }\n};\n\nvar parseBlob = function parseBlob(response) {\n  return response.blob();\n};\n\nvar parseBody = function parseBody(json) {\n  if (json && json.body !== '') {\n    return json;\n  }\n\n  return {\n    code: 0,\n    message: 'success'\n  };\n};\n\nexport var format = function format(url) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return stringFormat.apply(void 0, [url].concat(_toConsumableArray(args.map(function (arg) {\n    return encodeURIComponent(arg);\n  }))));\n};\nexport default {\n  postWithCallback: function postWithCallback(url, datas, cb, errorCb) {\n    return Vue.http.post(url, encodeData(datas), {\n      headers: {\n        'Content-type': URL_ENCODED_CONTENT_TYPE\n      }\n    }).then(checkStatus).then(parseJSON).then(function (json) {\n      if (cb) {\n        cb(json);\n      }\n    }).catch(function (ex) {\n      if (errorCb) {\n        errorCb(ex);\n      }\n    });\n  },\n  post: function post(url, datas, options) {\n    return Vue.http.post(url, getData(datas), getOptions(options)).then(checkStatus).then(function (response) {\n      return isBlobResponseType(options) ? parseBlob(response) : parseJSON(response);\n    }).then(function (response) {\n      return isBlobResponseType(options) ? response : parseBody(response);\n    }).catch(function (err) {\n      return Promise.reject(err.body);\n    });\n  },\n  put: function put(url, datas, options) {\n    return Vue.http.put(url, getData(datas), getOptions(options)).then(checkStatus).then(parseJSON).then(parseBody);\n  },\n  delete: function _delete(url, datas) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var newOptions = _objectSpread({\n      body: getData(datas)\n    }, getOptions(options));\n\n    return Vue.http.delete(url, newOptions).then(checkStatus).then(parseJSON).then(parseBody);\n  },\n  get: function get(url) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var fetchHeaders = options && options.fetchHeaders;\n    return Vue.http.get(url, options).then(checkStatus).then(\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(response) {\n        var data;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!isBlobResponseType(options)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 3;\n                return parseBlob(response);\n\n              case 3:\n                _context.t0 = _context.sent;\n                _context.next = 9;\n                break;\n\n              case 6:\n                _context.next = 8;\n                return parseJSON(response);\n\n              case 8:\n                _context.t0 = _context.sent;\n\n              case 9:\n                data = _context.t0;\n\n                if (!fetchHeaders) {\n                  _context.next = 12;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  data: data,\n                  headers: response.headers\n                });\n\n              case 12:\n                return _context.abrupt(\"return\", data);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()).then(function (response) {\n      if (fetchHeaders) {\n        return {\n          data: isBlobResponseType(options) ? response.data : parseBody(response.data),\n          headers: response.headers\n        };\n      }\n\n      return isBlobResponseType(options) ? response : parseBody(response);\n    }).catch(function (err) {\n      return Promise.reject(err.body);\n    });\n  },\n  jsonp: function jsonp(url) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return Vue.http.jsonp(url, options).then(checkStatus);\n  }\n};",{"version":3,"sources":["/Users/shizhonghua/workspace/sell/src/http/index.js"],"names":["Vue","VueResource","stringFormat","interceptors","isSuccess","getError","use","http","options","root","process","env","VUE_APP_SERVER","timeout","MAX_TIME_OUT","URL_ENCODED_CONTENT_TYPE","forEach","interceptor","push","checkStatus","response","encodeData","data","body","key","encodeURIComponent","length","substring","getData","getOptions","headers","isBlobResponseType","Boolean","responseType","parseJSON","status","Promise","resolve","code","message","json","error","console","log","parseBlob","blob","parseBody","format","url","args","map","arg","postWithCallback","datas","cb","errorCb","post","then","catch","ex","err","reject","put","delete","newOptions","get","fetchHeaders","jsonp"],"mappings":";;;;;;;AAAA,OAAOA,GAAP,MAAgB,0BAAhB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,YAAP;AACA,SAASC,SAAT,EAAoBC,QAApB;AAEAL,GAAG,CAACM,GAAJ,CAAQL,WAAR;AACAD,GAAG,CAACO,IAAJ,CAASC,OAAT,CAAiBC,IAAjB,GAAwBC,OAAO,CAACC,GAAR,CAAYC,cAApC;AACAZ,GAAG,CAACO,IAAJ,CAASC,OAAT,CAAiBK,OAAjB,GAA2BH,OAAO,CAACC,GAAR,CAAYG,YAAvC,C,CAAoD;;AAEpD,IAAMC,wBAAwB,GAC5B,kDADF;AAGAZ,YAAY,CAACa,OAAb,CAAqB,UAAAC,WAAW;AAAA,SAAIjB,GAAG,CAACO,IAAJ,CAASJ,YAAT,CAAsBe,IAAtB,CAA2BD,WAA3B,CAAJ;AAAA,CAAhC;;AAEA,IAAME,WAAW,GAAG,SAAdA,WAAc,CAAAC,QAAQ,EAAI;AAC9B,MAAIhB,SAAS,CAACgB,QAAD,CAAb,EAAyB;AACvB,WAAOA,QAAP;AACD;;AACD,QAAMf,QAAQ,CAACe,QAAD,CAAd;AACD,CALD;;AAOA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAe;AAAA,MAAdC,IAAc,uEAAP,EAAO;AAChC,MAAIC,IAAI,GAAG,EAAX;;AAEA,OAAK,IAAIC,GAAT,IAAgBF,IAAhB,EAAsB;AACpBC,IAAAA,IAAI,IAAIE,kBAAkB,CAACD,GAAD,CAAlB,GAA0B,GAA1B,GAAgCC,kBAAkB,CAACH,IAAI,CAACE,GAAD,CAAL,CAAlD,GAAgE,GAAxE;AACD;;AACD,MAAID,IAAI,CAACG,MAAT,EAAiB;AACf;AACAH,IAAAA,IAAI,GAAGA,IAAI,CAACI,SAAL,CAAe,CAAf,EAAkBJ,IAAI,CAACG,MAAL,GAAc,CAAhC,CAAP;AACD;;AAED,SAAOH,IAAP;AACD,CAZD;;AAcA,IAAMK,OAAO,GAAG,SAAVA,OAAU,CAACN,IAAD,EAAwB;AAAA,MAAjBd,OAAiB,uEAAP,EAAO;AACtC,SAAOA,OAAO,CAACa,UAAR,GAAqBA,UAAU,CAACC,IAAD,CAA/B,GAAwCA,IAA/C;AACD,CAFD;;AAIA,IAAMO,UAAU,GAAG,SAAbA,UAAa,GAAkB;AAAA,MAAjBrB,OAAiB,uEAAP,EAAO;AACnC,MAAIsB,OAAO,GAAGtB,OAAO,CAACsB,OAAR,IAAmB,EAAjC;;AAEA,MAAItB,OAAO,CAACa,UAAZ,EAAwB;AACtBS,IAAAA,OAAO,CAAC,cAAD,CAAP,GAA0Bf,wBAA1B;AACD;;AACD,2BACKP,OADL;AAEEsB,IAAAA,OAAO,EAAPA;AAFF;AAID,CAVD;;AAYA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAvB,OAAO;AAAA,SAChCwB,OAAO,CAACxB,OAAO,IAAIA,OAAO,CAACyB,YAAR,KAAyB,MAArC,CADyB;AAAA,CAAlC,C,CAEA;;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAd,QAAQ,EAAI;AAC5B,MAAI;AACF,QAAIA,QAAQ,CAACe,MAAT,KAAoB,GAApB,IAA2Bf,QAAQ,CAACG,IAAT,KAAkB,EAAjD,EAAqD;AACnD,aAAO,IAAIa,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC5BA,QAAAA,OAAO,CAAC;AACNd,UAAAA,IAAI,EAAE;AACJe,YAAAA,IAAI,EAAE,CADF;AAEJC,YAAAA,OAAO,EAAE;AAFL;AADA,SAAD,CAAP;AAMD,OAPM,CAAP;AAQD;;AACD,WAAOnB,QAAQ,CAACoB,IAAT,EAAP;AACD,GAZD,CAYE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBF,KAApC;AACD;AACF,CAhBD;;AAiBA,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAAAxB,QAAQ;AAAA,SAAIA,QAAQ,CAACyB,IAAT,EAAJ;AAAA,CAA1B;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAN,IAAI,EAAI;AACxB,MAAIA,IAAI,IAAIA,IAAI,CAACjB,IAAL,KAAc,EAA1B,EAA8B;AAC5B,WAAOiB,IAAP;AACD;;AACD,SAAO;AACLF,IAAAA,IAAI,EAAE,CADD;AAELC,IAAAA,OAAO,EAAE;AAFJ,GAAP;AAID,CARD;;AAUA,OAAO,IAAMQ,MAAM,GAAG,SAATA,MAAS,CAACC,GAAD;AAAA,oCAASC,IAAT;AAASA,IAAAA,IAAT;AAAA;;AAAA,SACpB/C,YAAY,MAAZ,UAAa8C,GAAb,4BAAqBC,IAAI,CAACC,GAAL,CAAS,UAAAC,GAAG;AAAA,WAAI1B,kBAAkB,CAAC0B,GAAD,CAAtB;AAAA,GAAZ,CAArB,GADoB;AAAA,CAAf;AAGP,eAAe;AACbC,EAAAA,gBADa,4BACKJ,GADL,EACUK,KADV,EACiBC,EADjB,EACqBC,OADrB,EAC8B;AACzC,WAAOvD,GAAG,CAACO,IAAJ,CACJiD,IADI,CACCR,GADD,EACM3B,UAAU,CAACgC,KAAD,CADhB,EACyB;AAC5BvB,MAAAA,OAAO,EAAE;AACP,wBAAgBf;AADT;AADmB,KADzB,EAMJ0C,IANI,CAMCtC,WAND,EAOJsC,IAPI,CAOCvB,SAPD,EAQJuB,IARI,CAQC,UAAUjB,IAAV,EAAgB;AACpB,UAAIc,EAAJ,EAAQ;AACNA,QAAAA,EAAE,CAACd,IAAD,CAAF;AACD;AACF,KAZI,EAaJkB,KAbI,CAaE,UAAUC,EAAV,EAAc;AACnB,UAAIJ,OAAJ,EAAa;AACXA,QAAAA,OAAO,CAACI,EAAD,CAAP;AACD;AACF,KAjBI,CAAP;AAkBD,GApBY;AAqBbH,EAAAA,IArBa,gBAqBPR,GArBO,EAqBFK,KArBE,EAqBK7C,OArBL,EAqBc;AACzB,WAAOR,GAAG,CAACO,IAAJ,CACJiD,IADI,CACCR,GADD,EACMpB,OAAO,CAACyB,KAAD,CADb,EACsBxB,UAAU,CAACrB,OAAD,CADhC,EAEJiD,IAFI,CAECtC,WAFD,EAGJsC,IAHI,CAGC,UAAArC,QAAQ,EAAI;AAChB,aAAOW,kBAAkB,CAACvB,OAAD,CAAlB,GACHoC,SAAS,CAACxB,QAAD,CADN,GAEHc,SAAS,CAACd,QAAD,CAFb;AAGD,KAPI,EAQJqC,IARI,CAQC,UAAArC,QAAQ,EAAI;AAChB,aAAOW,kBAAkB,CAACvB,OAAD,CAAlB,GAA8BY,QAA9B,GAAyC0B,SAAS,CAAC1B,QAAD,CAAzD;AACD,KAVI,EAWJsC,KAXI,CAWE,UAAAE,GAAG,EAAI;AACZ,aAAOxB,OAAO,CAACyB,MAAR,CAAeD,GAAG,CAACrC,IAAnB,CAAP;AACD,KAbI,CAAP;AAcD,GApCY;AAqCbuC,EAAAA,GArCa,eAqCRd,GArCQ,EAqCHK,KArCG,EAqCI7C,OArCJ,EAqCa;AACxB,WAAOR,GAAG,CAACO,IAAJ,CACJuD,GADI,CACAd,GADA,EACKpB,OAAO,CAACyB,KAAD,CADZ,EACqBxB,UAAU,CAACrB,OAAD,CAD/B,EAEJiD,IAFI,CAECtC,WAFD,EAGJsC,IAHI,CAGCvB,SAHD,EAIJuB,IAJI,CAICX,SAJD,CAAP;AAKD,GA3CY;AA4CbiB,EAAAA,MA5Ca,mBA4CLf,GA5CK,EA4CAK,KA5CA,EA4CqB;AAAA,QAAd7C,OAAc,uEAAJ,EAAI;;AAChC,QAAMwD,UAAU;AACdzC,MAAAA,IAAI,EAAEK,OAAO,CAACyB,KAAD;AADC,OAEXxB,UAAU,CAACrB,OAAD,CAFC,CAAhB;;AAKA,WAAOR,GAAG,CAACO,IAAJ,CACJwD,MADI,CACGf,GADH,EACQgB,UADR,EAEJP,IAFI,CAECtC,WAFD,EAGJsC,IAHI,CAGCvB,SAHD,EAIJuB,IAJI,CAICX,SAJD,CAAP;AAKD,GAvDY;AAwDbmB,EAAAA,GAxDa,eAwDRjB,GAxDQ,EAwDW;AAAA,QAAdxC,OAAc,uEAAJ,EAAI;AACtB,QAAM0D,YAAY,GAAG1D,OAAO,IAAIA,OAAO,CAAC0D,YAAxC;AAEA,WAAOlE,GAAG,CAACO,IAAJ,CACJ0D,GADI,CACAjB,GADA,EACKxC,OADL,EAEJiD,IAFI,CAECtC,WAFD,EAGJsC,IAHI;AAAA;AAAA;AAAA;AAAA;AAAA,8BAGC,iBAAMrC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACSW,kBAAkB,CAACvB,OAAD,CAD3B;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAEMoC,SAAS,CAACxB,QAAD,CAFf;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAGMc,SAAS,CAACd,QAAD,CAHf;;AAAA;AAAA;;AAAA;AACEE,gBAAAA,IADF;;AAAA,qBAKA4C,YALA;AAAA;AAAA;AAAA;;AAAA,iDAMK;AACL5C,kBAAAA,IAAI,EAAJA,IADK;AAELQ,kBAAAA,OAAO,EAAEV,QAAQ,CAACU;AAFb,iBANL;;AAAA;AAAA,iDAWGR,IAXH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAHD;;AAAA;AAAA;AAAA;AAAA,SAgBJmC,IAhBI,CAgBC,UAAArC,QAAQ,EAAI;AAChB,UAAI8C,YAAJ,EAAkB;AAChB,eAAO;AACL5C,UAAAA,IAAI,EAAES,kBAAkB,CAACvB,OAAD,CAAlB,GACFY,QAAQ,CAACE,IADP,GAEFwB,SAAS,CAAC1B,QAAQ,CAACE,IAAV,CAHR;AAILQ,UAAAA,OAAO,EAAEV,QAAQ,CAACU;AAJb,SAAP;AAMD;;AAED,aAAOC,kBAAkB,CAACvB,OAAD,CAAlB,GAA8BY,QAA9B,GAAyC0B,SAAS,CAAC1B,QAAD,CAAzD;AACD,KA3BI,EA4BJsC,KA5BI,CA4BE,UAAAE,GAAG,EAAI;AACZ,aAAOxB,OAAO,CAACyB,MAAR,CAAeD,GAAG,CAACrC,IAAnB,CAAP;AACD,KA9BI,CAAP;AA+BD,GA1FY;AA2Fb4C,EAAAA,KA3Fa,iBA2FNnB,GA3FM,EA2Fa;AAAA,QAAdxC,OAAc,uEAAJ,EAAI;AACxB,WAAOR,GAAG,CAACO,IAAJ,CAAS4D,KAAT,CAAenB,GAAf,EAAoBxC,OAApB,EAA6BiD,IAA7B,CAAkCtC,WAAlC,CAAP;AACD;AA7FY,CAAf","sourcesContent":["import Vue from 'vue/dist/vue.runtime.esm'\nimport VueResource from 'vue-resource'\nimport stringFormat from 'string-format'\nimport interceptors from './interceptors'\nimport { isSuccess, getError } from './util'\n\nVue.use(VueResource)\nVue.http.options.root = process.env.VUE_APP_SERVER\nVue.http.options.timeout = process.env.MAX_TIME_OUT // 请求超时时间\n\nconst URL_ENCODED_CONTENT_TYPE =\n  'application/x-www-form-urlencoded; charset=UTF-8'\n\ninterceptors.forEach(interceptor => Vue.http.interceptors.push(interceptor))\n\nconst checkStatus = response => {\n  if (isSuccess(response)) {\n    return response\n  }\n  throw getError(response)\n}\n\nconst encodeData = (data = {}) => {\n  let body = ''\n\n  for (let key in data) {\n    body += encodeURIComponent(key) + '=' + encodeURIComponent(data[key]) + '&'\n  }\n  if (body.length) {\n    // remote the last '&'\n    body = body.substring(0, body.length - 1)\n  }\n\n  return body\n}\n\nconst getData = (data, options = {}) => {\n  return options.encodeData ? encodeData(data) : data\n}\n\nconst getOptions = (options = {}) => {\n  let headers = options.headers || {}\n\n  if (options.encodeData) {\n    headers['Content-type'] = URL_ENCODED_CONTENT_TYPE\n  }\n  return {\n    ...options,\n    headers\n  }\n}\n\nconst isBlobResponseType = options =>\n  Boolean(options && options.responseType === 'blob')\n// 返回Promise对象\nconst parseJSON = response => {\n  try {\n    if (response.status === 200 && response.body === '') {\n      return new Promise(resolve => {\n        resolve({\n          body: {\n            code: 0,\n            message: 'success'\n          }\n        })\n      })\n    }\n    return response.json()\n  } catch (error) {\n    console.log('parseJSON is error:' + error)\n  }\n}\nconst parseBlob = response => response.blob()\nconst parseBody = json => {\n  if (json && json.body !== '') {\n    return json\n  }\n  return {\n    code: 0,\n    message: 'success'\n  }\n}\n\nexport const format = (url, ...args) =>\n  stringFormat(url, ...args.map(arg => encodeURIComponent(arg)))\n\nexport default {\n  postWithCallback (url, datas, cb, errorCb) {\n    return Vue.http\n      .post(url, encodeData(datas), {\n        headers: {\n          'Content-type': URL_ENCODED_CONTENT_TYPE\n        }\n      })\n      .then(checkStatus)\n      .then(parseJSON)\n      .then(function (json) {\n        if (cb) {\n          cb(json)\n        }\n      })\n      .catch(function (ex) {\n        if (errorCb) {\n          errorCb(ex)\n        }\n      })\n  },\n  post (url, datas, options) {\n    return Vue.http\n      .post(url, getData(datas), getOptions(options))\n      .then(checkStatus)\n      .then(response => {\n        return isBlobResponseType(options)\n          ? parseBlob(response)\n          : parseJSON(response)\n      })\n      .then(response => {\n        return isBlobResponseType(options) ? response : parseBody(response)\n      })\n      .catch(err => {\n        return Promise.reject(err.body)\n      })\n  },\n  put (url, datas, options) {\n    return Vue.http\n      .put(url, getData(datas), getOptions(options))\n      .then(checkStatus)\n      .then(parseJSON)\n      .then(parseBody)\n  },\n  delete (url, datas, options = {}) {\n    const newOptions = {\n      body: getData(datas),\n      ...getOptions(options)\n    }\n\n    return Vue.http\n      .delete(url, newOptions)\n      .then(checkStatus)\n      .then(parseJSON)\n      .then(parseBody)\n  },\n  get (url, options = {}) {\n    const fetchHeaders = options && options.fetchHeaders\n\n    return Vue.http\n      .get(url, options)\n      .then(checkStatus)\n      .then(async response => {\n        const data = isBlobResponseType(options)\n          ? await parseBlob(response)\n          : await parseJSON(response)\n\n        if (fetchHeaders) {\n          return {\n            data,\n            headers: response.headers\n          }\n        }\n        return data\n      })\n      .then(response => {\n        if (fetchHeaders) {\n          return {\n            data: isBlobResponseType(options)\n              ? response.data\n              : parseBody(response.data),\n            headers: response.headers\n          }\n        }\n\n        return isBlobResponseType(options) ? response : parseBody(response)\n      })\n      .catch(err => {\n        return Promise.reject(err.body)\n      })\n  },\n  jsonp (url, options = {}) {\n    return Vue.http.jsonp(url, options).then(checkStatus)\n  }\n}\n"]}]}