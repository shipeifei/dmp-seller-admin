{"remainingRequest":"/Users/shizhonghua/workspace/sell/node_modules/babel-loader/lib/index.js!/Users/shizhonghua/workspace/sell/src/http/interceptors/errorInterceptor.js","dependencies":[{"path":"/Users/shizhonghua/workspace/sell/src/http/interceptors/errorInterceptor.js","mtime":1553649389000},{"path":"/Users/shizhonghua/workspace/sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shizhonghua/workspace/sell/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { isSuccess, getError } from \"../util\";\nimport store from '@/store';\nvar requestCount = 0; // 当前请求数\n\nvar requests = []; // 当前请求错误\n\nvar responseErrors = []; // 当前请求错误\n\nvar setHttpStatus = function setHttpStatus() {\n  if (requestCount === 0) {\n    if (responseErrors.length) {\n      store.dispatch('afterRequestFailed', responseErrors);\n    } else {\n      store.dispatch('afterRequestSuccess');\n    }\n  }\n}; // 设置页面加载状态的拦截器\n\n\nexport default (function (request) {\n  if (requestCount === 0) {\n    requests = [];\n    responseErrors = [];\n    store.dispatch('beforeRequest', request);\n  }\n\n  requestCount++;\n  requests.push(request); // continue to next interceptor\n\n  return function (response) {\n    requestCount--;\n\n    if (!isSuccess(response)) {\n      responseErrors.push(getError(response));\n    }\n\n    setHttpStatus();\n  };\n});",{"version":3,"sources":["/Users/shizhonghua/workspace/sell/src/http/interceptors/errorInterceptor.js"],"names":["isSuccess","getError","store","requestCount","requests","responseErrors","setHttpStatus","length","dispatch","request","push","response"],"mappings":"AAAA,SACEA,SADF,EAEEC,QAFF;AAIA,OAAOC,KAAP,MAAkB,SAAlB;AACA,IAAIC,YAAY,GAAG,CAAnB,C,CACA;;AACA,IAAIC,QAAQ,GAAG,EAAf,C,CACA;;AAEA,IAAIC,cAAc,GAAG,EAArB,C,CAAwB;;AAExB,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,MAAIH,YAAY,KAAK,CAArB,EAAwB;AACtB,QAAIE,cAAc,CAACE,MAAnB,EAA2B;AACzBL,MAAAA,KAAK,CAACM,QAAN,CAAe,oBAAf,EAAqCH,cAArC;AACD,KAFD,MAEO;AACLH,MAAAA,KAAK,CAACM,QAAN,CAAe,qBAAf;AACD;AACF;AACF,CARD,C,CAUA;;;AACA,gBAAe,UAAAC,OAAO,EAAI;AACxB,MAAIN,YAAY,KAAK,CAArB,EAAwB;AACtBC,IAAAA,QAAQ,GAAG,EAAX;AACAC,IAAAA,cAAc,GAAG,EAAjB;AACAH,IAAAA,KAAK,CAACM,QAAN,CAAe,eAAf,EAAgCC,OAAhC;AACD;;AACDN,EAAAA,YAAY;AACZC,EAAAA,QAAQ,CAACM,IAAT,CAAcD,OAAd,EAPwB,CASxB;;AACA,SAAO,UAAAE,QAAQ,EAAI;AACjBR,IAAAA,YAAY;;AACZ,QAAI,CAACH,SAAS,CAACW,QAAD,CAAd,EAA0B;AACxBN,MAAAA,cAAc,CAACK,IAAf,CAAoBT,QAAQ,CAACU,QAAD,CAA5B;AACD;;AAEDL,IAAAA,aAAa;AACd,GAPD;AAQD,CAlBD","sourcesContent":["import {\n  isSuccess,\n  getError\n} from '../util'\nimport store from '@/store'\nlet requestCount = 0\n// 当前请求数\nlet requests = []\n// 当前请求错误\n\nlet responseErrors = [] // 当前请求错误\n\nconst setHttpStatus = () => {\n  if (requestCount === 0) {\n    if (responseErrors.length) {\n      store.dispatch('afterRequestFailed', responseErrors)\n    } else {\n      store.dispatch('afterRequestSuccess')\n    }\n  }\n}\n\n// 设置页面加载状态的拦截器\nexport default request => {\n  if (requestCount === 0) {\n    requests = []\n    responseErrors = []\n    store.dispatch('beforeRequest', request)\n  }\n  requestCount++\n  requests.push(request)\n\n  // continue to next interceptor\n  return response => {\n    requestCount--\n    if (!isSuccess(response)) {\n      responseErrors.push(getError(response))\n    }\n\n    setHttpStatus()\n  }\n}\n"]}]}